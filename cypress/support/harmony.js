// this file is generated by Harmony

window._harmony_ruleset = {
  "version": 1,
  "runner": "cypress",
  "cypressOptions": {
    "version": 10,
    "testIdAttribute": [
      "id",
      "data-testid",
      "data-test",
      "data-cy",
      "data-harmony-id"
    ],
    "selectorAttributes": [
      "name",
      "id",
      "for",
      "action",
      "alt",
      "src",
      "aria-label",
      "data-icon"
    ],
    "elementNameAttributes": [
      "aria-label",
      "name",
      "title",
      "placeholder",
      "alt",
      "for",
      "id",
      "data-icon"
    ],
    "filePreamble": "// this file is generated by Harmony",
    "IS": {
      "input,textarea": "%o.clear().type(%s)",
      "[contenteditable=true]": "%o.clear().type(%s)",
      "select": "%o.select(%s)"
    },
    "SHOULD_BE": {
      "input": "expect(%e).to.have.value(%s)",
      "*": "expect(%e).to.have.text(%s)"
    },
    "IF_IS": {
      "input": "%e.val() === %s",
      "*": "%e.text() === %s"
    }
  },
  "objects": {
    "#URL": {
      "WHEN": {
        "*": "cy.visit(%s)"
      }
    },
    "#Session": {
      "BEGIN": {
        "*": "cy.session([%s], () => {\n%b\n    }); cy.visit('/')"
      }
    },
    "#Origin": {
      "BEGIN": {
        "*": "cy.origin(%s, () => {\n%b\n    })"
      }
    },
    "*": "cy.OBJ(%s)",
    "css:*": "cy.get(%s)",
    "id:*": "cy.get('#' + %s)",
    "class:*": "cy.get(%s)",
    "contains:*": "cy.contains(%s)"
  },
  "WHEN": {
    "*": {
      "code": "%o.IS(%s)",
      "arg": {
        ":read-write,input:read-only,textarea": "%e.value"
      }
    },
    "#checked": "%o.check({ force: true })",
    "#cleared": "%o.clear()",
    "#clicked": "%o.click()",
    "#focused": "%o.focus()",
    "#forceClicked": "%o.click( {force:true} )",
    "#forceTyped *": "%o.type(%s, {force:true})",
    "#pressed": "%o.click()",
    "#selected *": "%o.select(%s)",
    "#selectFile *": "cy.get('input[type=file]').selectFile(%s,{ force: true })",
    "#testRunId": "%o.IS(window._harmony_runId)",
    "#typed *": "%o.type(%s)",
    "#unchecked": "%o.uncheck({ force: true })",
    "#waitToDisappear *": "%o.waitUntil(() => cy.$$(%s).length === 0)",
    "#wait-2000": "cy.wait(2000)"
  },
  "THEN": {
    "*": {
      "code": "%o.SHOULD_BE(%s)",
      "arg": {
        "input": "%e.value",
        "*": "%e.textContent"
      }
    },
    "#caption *": "%o.should('attr.text', %s)",
    "#checked": "%o.should('be.checked')",
    "#contain *": "%o.should('contain', %s)",
    "#disabled": "%o.should('be.disabled')",
    "#enabled": "%o.should('not.be.disabled')",
    "#eq *": {
      "code": "%o.should('eq', %s)"
    },
    "#focused": "%o.should('have.focus')",
    "#gt *": {
      "code": "%o.invoke('text').then(Number).should('be.gt', Number(%s))"
    },
    "#include *": "%o.should('include', %s)",
    "#label *": "%o.SHOULD_HAVE_LABEL(%s)",
    "#lt *": {
      "code": "%o.invoke('text').then(Number).should('be.lt', Number(%s))"
    },
    "#non-focused": "%o.should('not.have.focus')",
    "#non-present": "%o.should('not.exist')",
    "#non-visible": "%o.should('not.be.visible')",
    "#present": "%o.should('exist')",
    "#regexp *": "%o.contains(RegExp(%s))",
    "#unchecked": "%o.should('not.be.checked')",
    "#value *": "%o.should('have.value', %s)",
    "#visible": "%o.should('be.visible')"
  },
  "IF": {
    "#present": "%o.should(() => { /* avoid default existence check */ })\n.IF($o => $o.length > 0, () => {\n%b\n    })",
    "#non-present": "%o.should(() => { /* avoid default existence check */ })\n.IF($o => $o.length == 0, () => {\n%b\n    })",
    "*": "%o.IF($o => IS($o, %s), () => {\n%b\n    })"
  },
  "phrase": "cy.PHRASE(%s, %f)",
  "missingPhrase": "cy.MISSING(%s, %f)",
  "inspector": {
    "ignore": ":not(*)"
  },
  "gestures": {
    "click": {
      "command": "WHEN",
      "event": "click",
      "value": "#pressed",
      "only": ":not(select,label,label *,input[type=checkbox])"
    },
    "check": {
      "command": "WHEN",
      "event": "click",
      "value": "#checked",
      "only": "input[type=checkbox]:not(:checked)"
    },
    "uncheck": {
      "command": "WHEN",
      "event": "click",
      "value": "#unchecked",
      "only": "input[type=checkbox]:checked"
    },
    "type": {
      "command": "WHEN",
      "event": "input",
      "value": {
        "js": "%e.value || '#cleared'"
      },
      "only": ":read-write",
      "merge": {
        "type": "suppress",
        "click": "suppress"
      }
    },
    "keydown": {
      "command": "WHEN",
      "event": "keydown",
      "if": "event.key === 'Enter' || event.key === 'Tab'",
      "only": "input",
      "value": {
        "js": "'{' + (event.key||'').toLowerCase() + '}'"
      },
      "merge": {
        "type": "concat"
      }
    },
    "rightclick": {
      "command": "WHEN",
      "event": "contextmenu",
      "value": "#rightclicked"
    },
    "select": {
      "command": "WHEN",
      "event": "change",
      "only": "select",
      "value": {
        "js": "%e.value"
      }
    }
  }
}
window._harmony_testIdAttributes = ["id","data-testid","data-test","data-cy","data-harmony-id"]
window._harmony_selectors = new Map([
  ["Start",
    [["id_username","id_username"],["id_password","id_password"],["Login","css:#login-box > div > div > div:nth-child(2) > form > div:nth-child(4) > button"],["Food Ordering System","css:#topNav > a"],["Order Salad","css:body > div > div > div:nth-child(3) > div > center > a"],["$ 45.00","css:#regular_salad_card-3 > button"],["Menu","css:#navbarText > ul > li:nth-child(1) > a"],["cart_button","cart_button"],["Instructions:","css:body > div > div > div > div > div:nth-child(1) > fieldset > legend"],["checkout_button","checkout_button"],["cart_heading","cart_heading"],["Order Platters","css:body > div > div > div:nth-child(4) > div > center > a"],["55.00","css:#1-1 > strong"],["Choose one of the Platters","css:body > div > div > div > div > h4"],["Order Pizza","css:body > div > div > div:nth-child(1) > div > center > a"],["submit_toppings","submit_toppings"],["Choose one of the Pizza's 🍕","css:body > div:nth-child(2) > div > div > h4"],["Order Subs","css:body > div > div > div:nth-child(2) > div > center > a"],["total","total"],["Pizza","css:#login-box > div > div > div:nth-child(4) > a > strong"],["login-box","login-box"],["Burger","css:#login-box > div > div > div:nth-child(5) > a > strong"],["Salad","css:#login-box > div > div > div:nth-child(6) > a > strong"],["Platters","css:#login-box > div > div > div:nth-child(7) > a > strong"],["Pasta","css:#login-box > div > div > div:nth-child(8) > a > strong"],["Our Location","css:#navbarText > ul > li:nth-child(2) > a"],["Located on There street beside of XYZ Bu...","css:body > div > div > div > div > div:nth-child(2)"],["Pizza Lorem ipsum dolor sit amet, consec...","css:body > div > div"],["Our Shop Hours","css:body > div > div > div > div > div:nth-child(1) > h3"],["Shop Hours","css:#navbarText > ul > li:nth-child(3) > a"],["Contact Us","css:#navbarText > ul > li:nth-child(4) > a"],["Our Contact Details","css:body > div > div > div > div > div:nth-child(1) > h3 > u"],["View Orders","css:#navbarText > span > a:nth-child(1)"],["Click the Order Row (Red Filled Row) to ...","css:body > div > div > div > div > div > fieldset > ul > li"],["Logout","css:#navbarText > span > button"],["cart-count","cart-count"],["Small - Sushi Platter","css:#cart_body > tr:nth-child(2) > td:nth-child(2)"],["Small Sub - Beef Burger","css:#cart_body > tr:nth-child(3) > td:nth-child(2)"],["Small Sicillian pizza with","css:#cart_body > tr:nth-child(4) > td:nth-child(2)"],["Vegan Salad 1","css:#cart_body > tr:nth-child(6) > td:nth-child(2)"],["Food Ordering System Menu Our Location S...","css:body"],["Pasta Macaroni","css:#cart_body > tr:nth-child(5) > td:nth-child(2)"],["Click the Item row to remove item from c...","css:body > div > div > div > div > div:nth-child(1) > fieldset > ul > li:nth-child(1)"],["Instructions: Click the Item row to remo...","css:body > div > div > div > div"],["not delivered","css:#orders_table > tr:nth-child(1) > td:nth-child(4)"],["Vegan Salad","css:#cart_body > tr > td:nth-child(2)"],["admin","css:#orders_table > tr:nth-child(1) > td:nth-child(2)"],["Order Pasta","css:body > div > div > div:nth-child(5) > div > center > a"],["$ 95.00","css:#reg_pasta_card-3 > button"]]
  ]
])

Cypress.on('uncaught:exception', (error) => {
  Cypress.log({
    name: 'uncaught:exception',
    message: error.message,
    consoleProps: () => {
      return { error }
    },
  }).end()
  // returning false here prevents Cypress from failing the test
  return false
})

const runner = window.parent.window
Cypress.Commands.add('SEL', (featureName, abstractSelector, concreteSelector, required = 'required') => {
  const P = runner._harmony_plugin
  if (!P) return cy.get(P.toCSSSelector(concreteSelector))
  const reselected = P.reselectedSelectors.find(
    s => s.abstractSelector === abstractSelector
  )
  if (reselected) concreteSelector = reselected.concreteSelector
  const cssSelector = P.toCSSSelector(concreteSelector)
  if (required !== 'required') return cy.get(cssSelector)
  const start = Date.now()
  const timeout = 3000
  let result
  let doc
  cy.document({ log: false }).then(d => (doc = d))
  cy
    .get(cssSelector, { timeout: 6000000 })
    .should(async $elem => {
      result = $elem
      if ($elem.length === 0) {
        const end = Date.now()
        if (end - start > timeout) {
          const concreteSelector2 = await runner._harmony_plugin.RESELECT(abstractSelector, featureName)
          const cssSelector2 = P.toCSSSelector(concreteSelector2)
          const el = doc.querySelector(cssSelector2)
          result = Cypress.$(el)
        } else {
          throw new Error('Element not found')
        }
      }
    })
    .then(() => result) // we cannot yield a value from .should(), so we have to do this
})

Cypress.Commands.add('IS', { prevSubject: true }, (subject, value) => {
  const obj = cy.wrap(subject, { log: false })
  obj.then($elem => {
    if ($elem.is("input,textarea")) { obj.clear().type(value) }
    else if ($elem.is("[contenteditable=true]")) { obj.clear().type(value) }
    else if ($elem.is("select")) { obj.select(value) }
    else throw new Error('Unknown element type: ' + $elem.get(0).nodeName)
  })
})
Cypress.Commands.add('SHOULD_BE', { prevSubject: true }, (subject, value) => {
  const obj = cy.wrap(subject, { log: false })
  obj.should($elem => {
    const isJQuery = 'addClass' in $elem
    if (!isJQuery) expect($elem).to.equal(value)
    else if ($elem.is("input")) { expect($elem).to.have.value(value) }
    else if ($elem.is("*")) { expect($elem).to.have.text(value) }
    else expect($elem).to.have.text(value)
  })
})
window.IS = (subject, value) => {
  const $elem = subject
  const isJQuery = 'selector' in $elem
  if (!isJQuery) expect($elem).to.equal(value)
  if ($elem.is("input")) { return $elem.val() === value }
    else if ($elem.is("*")) { return $elem.text() === value }
  else throw new Error('Unknown element type: ' + $elem.get(0).nodeName)
}
Cypress.Commands.add('IF', { prevSubject: true }, async (subject, condition, fn) => {
  const matched = await condition(subject)
  cy.log('Condition was ' + matched)
  if (matched) return fn()
})
Cypress.Commands.add('START_RUN', async (runId, sut, serverUrl) => {
  // only do anything in the Harmony run
  if (Cypress.spec.name != 'harmony-run.cy.js') throw new Error('Not a Harmony run')

  sut && Cypress.config('baseUrl', sut)

  runner._harmony_runId = window._harmony_runId = runId
  runner._harmony_ruleset = window._harmony_ruleset
  runner._harmony_selectors = window._harmony_selectors
  runner._harmony_testIdAttributes = window._harmony_testIdAttributes
  runner._harmony_serverUrl = serverUrl
  if (!runner._harmony_plugin) {
    await new Promise((resolve) => {
      const script = runner.document.createElement('script')
      script.crossOrigin = 'anonymous'
      script.onload = resolve
      script.src = `${serverUrl}/cypressPlugin.js`
      runner.document.head.appendChild(script)
    })
  }
  await runner._harmony_plugin.init()
})
Cypress.Commands.add('PHRASE', (phrase, featureName) => {
  Cypress.log({name: 'phrase', message: `**${phrase}**`}).end()
})
Cypress.Commands.add('MISSING', (phrase, featureName) => {
  runner._harmony_plugin.MISSING(phrase, featureName)
})
Cypress.Commands.add('STEP', (stepNumber, sourceExcerpt) => {
  Cypress.log({name: 'step', message: sourceExcerpt}).end()
  const P = runner._harmony_plugin
  if (!P) return
  runner._harmony_plugin.STEP(stepNumber)
})
Cypress.Commands.add('TEST_CASE', (testCaseId) => {
  const P = runner._harmony_plugin
  if (!P) return
  runner._harmony_plugin.TEST_CASE(testCaseId)
})
Cypress.Commands.add('DONE', () => {
  const P = runner._harmony_plugin
  if (!P) return
  runner._harmony_plugin.DONE()
})
Cypress.Commands.add('CHECK', { prevSubject: true }, ($el) => {
  if ($el.is('input:checkbox')) {
    cy.wrap($el).check()
  } else if ($el.is('label[for]')) {
    cy.get(`#${$el.attr('for')}`).check()
  } else {
    throw new Error('This element is not a checkbox')
  }
})
